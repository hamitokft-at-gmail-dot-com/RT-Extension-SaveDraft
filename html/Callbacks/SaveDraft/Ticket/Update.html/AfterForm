<%init>
    my $id = $ARGS{'id'};
</%init>

<script>
    const ticketId    = "<% $id %>" || 'unknown';

    let   action      = 'default';
    const actionField = jQuery('input[name="Action"]');
    if (null != actionField) action = actionField[0].value || 'default';

    let   quote       = '-';
    const quoteField  = jQuery('input[name="QuoteTransaction"]');
    if (null != quoteField) quote = quoteField[0].value || '-';

    const backupId    = `RT_${ticketId}_${action}_${quote}_Backup`;
    const draftId     = `RT_${ticketId}_${action}_${quote}_Draft`;
    const draft       = localStorage.getItem(draftId) || '';
    const state       = { save: true, };

    jQuery().ready(() => {

        // Display modal
        if (draft) {
            const modal = jQuery('#SaveDraft');
            if (modal) {
                modal.css("display", "block");
            }

            const clearButton = jQuery("#SaveDraft-clear");
            clearButton.on('click', () => {
                localStorage.removeItem(draftId);
                modal.css("display", "none");
            } );

            const loadButton = jQuery("#SaveDraft-load");
            loadButton.on('click', () => {
                if (CKEDITOR.instances && CKEDITOR.instances['UpdateContent']) {
                    CKEDITOR.instances['UpdateContent'].setData( draft );
                } else {
                    jQuery('#UpdateContent').val(draft);
                }
                modal.css("display", "none");
            } );
        }

        jQuery('#UpdateType').on('change', function() {
            console.log('UpdateType',  this.value );
        });

        // Submit button
        jQuery('SubmitTicket').on('click', () => {
            state['save'] = false;
            localStorage.removeItem(backupId);
            localStorage.removeItem(draftId);
            state['save'] = true;
        });

        // RichTextEditor
        if (CKEDITOR.instances && CKEDITOR.instances['UpdateContent']) {
            const editor = CKEDITOR.instances['UpdateContent'];

            editor.on('instanceReady', function () {
                // Ha nincs draft, akkor elmentjuk az eredeti szoveget az editorbol
                if (0 == draft.length) localStorage.setItem(backupId, editor.getData());
                
                this.on('change', () => {
                    if (state['save']) localStorage.setItem(draftId, editor.getData());
                });
            });

            // ClearDraft button
            jQuery('#ClearDraft').on('click', () => {
                // Betoltjuk az editorba a backup-ot
                state['save'] = false;
                editor.setData( localStorage.getItem(backupId) );
                state['save'] = true;
                
                // Takaritunk
                localStorage.removeItem(draftId);
            });
        } else {
            // TextArea

            // Ha nincs draft, akkor elmentjuk az eredeti szoveget az textareabol
            if (0 == draft.length) localStorage.setItem(backupId, jQuery('#UpdateContent').val());

            jQuery('#UpdateContent').on('input propertychange', () => {
                if (state['save']) if (state['save']) localStorage.setItem(draftId, jQuery('#UpdateContent').val());
            });

            // ClearDraft button
            jQuery('#ClearDraft').on('click', () => {
                // Betoltjuk az textareaba a backup-ot
                state['save'] = false;
                jQuery('#UpdateContent').val(localStorage.getItem(backupId));
                state['save'] = true;
                
                // Takaritunk
                localStorage.removeItem(draftId);
            });
        }
    });

</script>
